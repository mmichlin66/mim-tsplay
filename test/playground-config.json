{
    "wellcomeMessage": "Wellcome to Mimcss Playground!",

    "extraLibs": [
        {
            "libName": "mimcss",
            "url": "mimcss",
            "files": [
                "index.d.ts",
                "styles/UtilTypes.d.ts",
                "styles/ColorTypes.d.ts",
                "styles/ImageTypes.d.ts",
                "styles/StyleTypes.d.ts",
                "styles/SelectorTypes.d.ts",
                "styles/MediaTypes.d.ts",
                "styles/FontFaceTypes.d.ts",
                "rules/RuleTypes.d.ts",
                "api/UtilAPI.d.ts",
                "api/ColorAPI.d.ts",
                "api/ImageAPI.d.ts",
                "api/StyleAPI.d.ts",
                "api/RuleAPI.d.ts",
                "api/SchedulingAPI.d.ts"
            ],
            "rootPath": "mimcss/"
        },

        {
            "libName": "mimbl",
            "url": "mimbl",
            "files": [
                "index.d.ts",
                "utils/EventSlot.d.ts",
                "utils/TriggerWatcher.d.ts",
                "api/UtilAPI.d.ts",
                "api/HtmlTypes.d.ts",
                "api/SvgTypes.d.ts",
                "api/mim.d.ts",
                "comp/Popups.d.ts"
            ],
            "rootPath": "mimbl/"
        }
    ],

    "examples": [
        { "name": "Templates" },
        {
            "name": "Basic Template",
            "path": "examples/basic-template.tsx",
            "description": "Empty style definition and component classes"
        },

        { "name": "Basic" },
        {
            "name": "Hello World!",
            "path": "examples/hello-world.tsx",
            "description": "Simple but real example of defining styles"
        },
        {
            "name": "Numeric Properties",
            "path": "examples/numeric-properties.tsx",
            "description": "Defining styles that include units of different dimensions"
        },
        {
            "name": "Gradients",
            "path": "examples/gradients.tsx",
            "description": "Demonstrates creating CSS gradients."
        },

        { "name": "Advanced" },
        {
            "name": "Themes",
            "path": "examples/themes.tsx",
            "description": "Demonstrates changing themes using style definition inheritance."
        },
        {
            "name": "Scheduling",
            "path": "examples/under-construction.tsx",
            "description": "Demonstrates custom scheduler."
        }
    ],

    "firstExample": "examples/basic-template.tsx",

    "codeSnippets": [
        {
            "category": "Style Rules",
            "name": "Class Rule",
            "description": "Defines styleset for CSS class",
            "template": "{name} = css.$class({\n})\n",
            "params": [
                {
                    "id": "name",
                    "name": "Property name",
                    "description": "Name of the property to hold the rule",
                    "isRequired": true
                }
            ]
        },
        {
            "category": "Style Rules",
            "name": "ID Rule",
            "description": "Defines styleset for element ID",
            "template": "{name} = css.$id({\n})\n",
            "params": [
                {
                    "id": "name",
                    "name": "Property name",
                    "description": "Name of the property to hold the rule",
                    "isRequired": true
                }
            ]
        },
        {
            "category": "Style Rules",
            "name": "Generic Rule",
            "description": "Defines styleset for arbitrary CSS selector",
            "template": "{name} = css.$style( \"{selector}\", {\n})\n",
            "params": [
                {
                    "id": "name",
                    "name": "Property name",
                    "description": "Name of the property to hold the rule",
                    "isRequired": true
                },
                {
                    "id": "selector",
                    "name": "Rule selector",
                    "description": "Selector string for the style rule",
                    "isRequired": false
                }
            ]
        },

        {
            "category": "Conditional Rules",
            "name": "Media Rule",
            "description": "Defines conditional media rule",
            "template": "{name} = css.$media( {},\n\tclass extends css.StyleDefinition\n\t{\n\t}\n)\n",
            "params": [
                {
                    "id": "name",
                    "name": "Property name",
                    "description": "Name of the property to hold the rule",
                    "isRequired": true
                }
            ]
        }
    ]

}
